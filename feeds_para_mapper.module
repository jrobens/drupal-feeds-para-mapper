<?php

/**
* @file
* Allows mapping to Paragraphs fields.
*/

use \Drupal\Core\Routing\RouteMatchInterface;
/**
 * Implements hook_help().
 */
function feeds_para_mapper_help($route_name, RouteMatchInterface $route_match){
  switch ($route_name) {
    case 'help.page.feeds_para_mapper':

      $filepath = dirname(__FILE__) . '/README.md';
      if (file_exists($filepath)) {
        $readme = file_get_contents($filepath);
      }
      else {
        $filepath = dirname(__FILE__) . '/README.txt';
        if (file_exists($filepath)) {
          $readme = file_get_contents($filepath);
        }
      }
      if (!isset($readme)) {
        return NULL;
      }
      $moduleHandler = Drupal::moduleHandler();
      if ($moduleHandler->moduleExists('markdown')) {
        $filters = $moduleHandler->invoke('markdown', 'filter_info');
        $info = $filters['filter_markdown'];

        if (function_exists($info['process callback'])) {
          $output = $info['process callback']($readme, NULL);
        }
        else {
          $output = '<pre>' . $readme . '</pre>';
        }
      }
      else {
        $output = '<pre>' . $readme . '</pre>';
      }

      return $output;
  }
}

/**
 * Implements hook_feeds_targets_alter().
 *
 * @param \Drupal\feeds\FieldTargetDefinition[] $targets
 */
function feeds_para_mapper_feeds_targets_alter(&$targets)
{
  $hasMapping = false;
  foreach ($targets as $name => $target) {
    if ($target->getPluginId() === "paragraphs") {
      $hasMapping = true;
      break;
    }
  }
  // Remove the default paragraphs mapping:
  // Note: this will change all feed types and not the current one only
  if ($hasMapping) {
    $entityTypeManager = Drupal::service('entity_type.manager');
    $storage = $entityTypeManager->getStorage('feeds_feed_type');
    $entities = $storage->loadMultiple();
    foreach ($entities as $item) {
      $mappings = $item->getMappings();
      $changed = false;
      foreach ($mappings as $delta => $mapping) {
        if (isset($mapping['settings']['paragraphs_type'])) {
          $item->removeMapping($delta);
          $changed = true;
        }
      }
      if ($changed) {
        $item->save();
      }
    }
  }
}

/**
 * Implements hook_entity_update().
 */
function feeds_para_mapper_entity_update(Drupal\Core\Entity\EntityInterface $entity)
{
  if(isset($entity->fpm_targets)){
    $rev = Drupal::service('feeds_para_mapper.revision_handler');
    $rev->handle($entity);
  }
}

